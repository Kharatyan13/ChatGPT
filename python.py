#zangvac
import main
import time
def list1():
    text = ("""Python-ում list-ը (ցանկը) փոփոխելի տվյալների տիպ է, որը թույլ է տալիս միևնույն փոփոխականի մեջ պահել բազմաթիվ արժեքներ։ Այն կարող է պարունակել տարբեր տիպի տվյալներ՝ թվեր, տողեր, այլ ցուցակներ և այլն։
Ահա մի քանի օրինակ, որ օգնում են հասկանալ՝
1. Ցանկի ստեղծում
my_list = [1, 2, 3, 4, 5]
2. Տվյալների տարբեր տիպերով ցանկ
mixed_list = [1, "hello", True, 3.14]
3. Դիմում էլեմենտներին (indexing)
print(my_list[0])   # կտպի 1
print(my_list[-1])  # կտպի 5 (վերջին էլեմենտը)
4. Ցանկին էլեմենտ ավելացնել
my_list.append(6)
5. Ցանկից էլեմենտ հեռացնել
my_list.remove(3)  # հեռացնում է առաջին հանդիպած 3-ը
6. Ցանկի երկարությունը
length = len(my_list)
7. Ցիկլով անցնել ցանկի միջով
for item in my_list:
    print(item)   
📌 Հիմնական մեթոդներ list-ի համար Python-ում
1. append(x)
Ավելացնում է արժեքը ցանկի վերջում։
numbers = [1, 2, 3]
numbers.append(4)
print(numbers)  # [1, 2, 3, 4]
2. insert(index, x)
Ավելացնում է արժեքը ցանկի մեջ նշված դիրքում։
numbers = [1, 3, 4]
numbers.insert(1, 2)  
print(numbers)  # [1, 2, 3, 4]
3. remove(x)
Հեռացնում է առաջին հանդիպած արժեքը ցանկից։
numbers = [1, 2, 3, 2]
numbers.remove(2)
print(numbers)  # [1, 3, 2]
4. pop([index])
Հեռացնում է և վերադարձնում է էլեմենտը։ Եթե չտաս index, հանում է վերջինը։
numbers = [1, 2, 3]
last = numbers.pop()
print(last)     # 3
print(numbers)  # [1, 2]
first = numbers.pop(0)
print(first)    # 1
5. index(x)
Վերադարձնում է արժեքի առաջին գտնվելու ինդեքսը։
numbers = [10, 20, 30]
i = numbers.index(20)
print(i)  # 1
6. count(x)
Հաշվում է՝ քանի անգամ է արժեքը հայտնվում ցանկում։
numbers = [1, 2, 2, 3]
print(numbers.count(2))  # 2
7. sort()
Դասավորում է ցանկը աճման կարգով (կամ նվազման, եթե նշես reverse=True)։
numbers = [5, 2, 9, 1]
numbers.sort()
print(numbers)  # [1, 2, 5, 9]
numbers.sort(reverse=True)
print(numbers)  # [9, 5, 2, 1]
8. reverse()
Շրջում է ցանկը (հակադարձում հերթականությունը)։
numbers = [1, 2, 3]
numbers.reverse()
print(numbers)  # [3, 2, 1]
9. copy()
Ստեղծում է ցանկի պատճեն։
a = [1, 2, 3]
b = a.copy()
print(b)  # [1, 2, 3]
10. clear()
Ջնջում է ցանկի բոլոր էլեմենտները։
numbers = [1, 2, 3]
numbers.clear()
print(numbers)  # []
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def set1():
    text = ("""
    Python-ում set (հավաքածու) տիպը unordered (անհաջորդական) և unindexed (ոչ ինդեքսավորված) տարրերի հավաքածու է։ Այն օգտագործվում է եզակի արժեքների պահման համար, այսինքն՝ set-ում նույն արժեքը կրկնվել չի կարող։

    Հիմնական հատկանիշները
    Unordered — տարրերի հերթականությունը պահված չէ
    
    Unindexed — տարրերին չի կարելի դիմել ինդեքսով (օրինակ՝ my_set[0] սխալ է)
    
    No duplicates — կրկնվող արժեքները ավտոմատորեն հեռացվում են
    
    Mutable — կարող ես ավելացնել կամ հեռացնել տարրեր
    
    Օրինակներ
    # Set-ի ստեղծում
    my_set = {1, 2, 3, 4}
    print(my_set)  # {1, 2, 3, 4}
    
    # Կրկնվող տարրեր
    my_set = {1, 2, 2, 3}
    print(my_set)  # {1, 2, 3} - 2-ը միայն մեկ անգամ է
    
    # Տարր ավելացնել
    my_set.add(5)
    print(my_set)  # {1, 2, 3, 5}
    
    # Տարր հեռացնել
    my_set.remove(2)
    print(my_set)  # {1, 3, 5}

    Օգտակար մեթոդներ
    add(elem) – ավելացնում է տարր
    
    remove(elem) – հեռացնում է տարր (եթե չկա՝ սխալ է տալիս)
    
    discard(elem) – հեռացնում է տարր (եթե չկա՝ ոչ մի բան չի անում)
    
    clear() – դատարկում է set-ը
    
    union(set2) – միավորում է երկու set
    
    intersection(set2) – վերցնում է ընդհանրական տարրերը
    
    difference(set2) – տարրերը, որոնք կան առաջին set-ում, բայց չկան երկրորդում
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def tuple1():
    text = ("""
    Python-ում tuple — դա հավաքածու է տարրերի, ինչպես list-ը (ցուցակ), բայց անփոփոխ է։ Այսինքն՝ երբ տյուպլը ստեղծվում է, դու չես կարող փոխել դրա տարրերը՝ ոչ ավելացնել, ոչ ջնջել, ոչ էլ փոխել որևէ արժեք։

    Տյուպլի հիմնական հատկությունները՝
        Անփոփոխ է (immutable)։
        
        Կարող է պարունակել տարբեր տիպի արժեքներ։
        
        Յուրաքանչյուր տարր ունի ինդեքս։
        
        Կառուցվում է փակագծերով ()։
    
    Օրինակ՝
    
    my_tuple = (1, 2, 3)
    print(my_tuple[0])  # կտպի 1
    
    Որտեղ է պետք օգտագործել tuple:
        Երբ տվյալները չպետք է փոխվեն (օրինակ՝ օրացուցային ամսաթիվներ, կոորդինատներ)։
        
        Երբ ուզում ես օգտագործել որպես dictionary-ի key։
        
        Երբ կարիք ունես արագ կատարողականի։
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def dict1():
    text = ("""
    Python-ում dictionary (բառարան)-ը տեղեկության պահման կառուցվածք է, որը պահում է զույգեր՝ "key" (բանալի) և "value" (արժեք) ձևաչափով։ Այն շատ նման է իրական բառարանին՝ որտեղ բառը բանալին է, իսկ դրա բացատրությունը՝ արժեքը։
    Օրինակ՝
    
        my_dict = {
        "name": "John",
        "age": 16,
        "country": "Armenia"
        }
        
    Այս օրինակում․

        "name"-ը բանալին է, "John"-ը դրա արժեքը,
        
        "age" բանալին ունի 16 արժեք,
        
        "country" բանալին ունի "Armenia" արժեք։

    Dictionary-ի հիմնական հատկությունները
        Բանալիները unique (եզակի) են։
        
        Կարող ես մուտք գործել արժեքին բանալու միջոցով։
        
        Կարող ես ավելացնել, փոխել կամ ջնջել տարրեր։
        
    Օգտագործման օրինակներ
        🔹 Արժեք ստանալ բանալու միջոցով
        
        
        print(my_dict["name"])  # կտպի John
        🔹 Ավելացնել նոր զույգ
        
        
        my_dict["school"] = "High School"
        🔹 Փոխել արժեք
        
        
        my_dict["age"] = 17
        🔹 Ջնջել բանալի
        
        
        del my_dict["country"]
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def array1():
    text = ("""
    Python-ում array-ը (զանգվածը) տվյալների հավաքածու է, որը պահում է միևնույն տիպի տվյալների շարան, այսինքն՝ այնպիսի արժեքներ, որոնք բոլորը նույն տիպի են՝ օրինակ միայն ամբողջ թվեր կամ միայն տասնորդական թվեր։

    Սակայն պետք է տարբերել երկու հիմնական բան՝
    1. List (ցանկ)
    Python-ում ամենատարածված զանգվածի նման կառույցը list-ն է։ Այն կարող է պահել տարբեր տիպի արժեքներ՝
    
    
    my_list = [1, "hello", 3.14, True]
    Բայց սա array չէ իրականում, այլ general-purpose ցուցակ։


    2. array module-ի array-ը
    Եթե ուզում ես իսկական array, որում բոլոր արժեքները միևնույն տիպի են (օրինակ՝ միայն ամբողջ թվեր), ապա պետք է օգտագործես Python-ի array մոդուլը։
    
    
    import array
    
    # Ստեղծում ենք array միայն ամբողջ թվերի համար
    numbers = array.array("i", [1, 2, 3, 4, 5])
    
    print(numbers)
    Այստեղ "i" նշանակում է integer (ամբողջ թիվ)։

    Ինչո՞ւ օգտագործել array
        Ավելի արագ է մեծ տվյալների դեպքում, քան list-ը։
        
        Ավելի քիչ հիշողություն է օգտագործում։
        
        Բայց list-ները շատ ավելի հարմար են ու ճկուն Python-ում։
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
#payman
def condition():
    text = ("""
    Python-ում պայմանը (condition) օգտագործվում է որոշում կայացնելու համար՝ եթե որոշ պայման ճիշտ է, ապա մի բան պետք է արվի, իսկ եթե սխալ է՝ այլ բան։
    Ամենահիմնական պայմանական կառուցվածքն է՝ if:
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def coditional_operator():
    text = ("""
    Հիմնական հարաբերական օպերատորները
        == — հավասար է
        
        != — հավասար չէ
        
        > — մեծ է
        
        < — փոքր է
        
        >= — մեծ կամ հավասար է
        
        <= — փոքր կամ հավասար է
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def if_elif_else():
    text = ("""
    Python-ում if, else և elif վերաբերող հրահանգները օգտագործվում են պայմանական բլոկներ ստեղծելու համար:

        if՝ այդ հրահանգը ստուգում է պայմանը, եթե պայմանը ճիշտ է (True), ապա կատարվում է այն հրահանգը, որը գտնվում է if-ի ներքևում։
        
        elif (else if)՝ օգտագործվում է այն դեպքում, երբ նախորդ if-ը կամ elif-ը կեղծ է (False), և եթե հաջորդ պայմանը ճիշտ է, ապա այն կատարվում է։
        
        else՝ եթե ոչ մեկը նախկին պայմաններից ճիշտ չէ, ապա կատարվում է else-ի ներքևում գտնվող հրահանգը։
        
    Օրինակ՝

        
        x = 10
        
        if x > 15:
            print("x-ը ավելի մեծ է 15-ից")
        elif x == 10:
            print("x-ը հավասար է 10-ի")
        else:
            print("x-ը փոքր է 10-ից")
        Այս դեպքում կտպագրվի՝
        
        
        x-ը հավասար է 10-ի
        Եթե x-ը լինի ավելի մեծ, քան 15, կկատարվի առաջին պայմանը, իսկ եթե փոքր, ապա երկրորդը։ else-ը վերջնական քայլն է, երբ ոչ մի այլ պայման չի հաստատվում։
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
#cikl
def cycle():
    text = ("""
    Python-ում "cycle"-ը սովորաբար վերաբերում է կրկնության (loop) մեթոդներին, որոնք թույլ են տալիս միևնույն գործառույթները մի քանի անգամ իրականացնել: Երկու հիմնական տեսակի կրկնություններ կան՝ for և while:
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def for1():
    text = ("""
    Python-ում for-ը կրկնության (loop-ի) կառուցվածք է, որը թույլ է տալիս մի շարքի (օրինակ՝ ցուցակ, տող, զանգված և այլն) տարրերով քայլել հերթականությամբ և կատարել գործողություն յուրաքանչյուր տարրի համար։
    
    Սինտաքսը՝

    for փոփոխական in հաջորդականություն:
        գործողություն(ներ)
    Օրինակ 1 — ցուցակով քայլելը

    fruits = ["apple", "banana", "cherry"]
    for fruit in fruits:
        print(fruit)
    📌 Արդյունքը կլինի.
    
    apple
    banana
    cherry
    Օրինակ 2 — range()-ի օգտագործում
    python

    for i in range(5):
        print(i)
    📌 Արդյունքը կլինի.
    

    0
    1
    2
    3
    4
    🔹 range(5) նշանակում է թվեր 0-ից մինչև 4 (5-ը չի ներառվում)։
    
    Օրինակ 3 — տողի (string) վրայով քայլելը

    for char in "hello":
        print(char)
    📌 Արդյունք՝
    
    Copy
    Edit
    h
    e
    l
    l
    o
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
def while1():
    text = ("""
    Python-ում while-ը կրկնության (loop) օպերատոր է, որը կատարում է որևէ գործողություն այնքան ժամանակ, քանի դեռ որոշակի պայման ճշմարիտ (True) է։
    
    🔹 Սինտաքսը՝

    while պայման:
        գործողություն(ներ)
    Այսինքն՝ եթե պայմանը ճիշտ է, ապա կկատարվի ցիկլի մարմինը (գործողությունները) կրկին ու կրկին։
    
    🔸 Օրինակ 1 — պարզ while ցիկլ

    i = 1
    while i <= 5:
        print(i)
        i += 1
    📌 Արդյունք՝
    

    1
    2
    3
    4
    5
    Այս կոդը տպում է թվերը 1-ից մինչև 5։ Ցիկլը կանգ է առնում, երբ i-ն դառնում է 6 (այսինքն՝ պայմանը էլ ճշմարիտ չէ)։
    
    ⚠️ Կարևոր է՝
    Միշտ համոզվիր, որ while ցիկլի մեջ փոփոխականը ինչ-որ պահի փոխվում է այնպես, որ պայմանը մի օր կդառնա սխալ, հակառակ դեպքում կստանաս անվերջ (infinite) ցիկլ։
    
    🔸 Օրինակ 2 — անվերջ ցիկլ (ոչ ճիշտ, բայց պետք է իմանալ)

    while True:
        print("This will run forever!")
    Այս ցիկլը երբեք չի կանգնի, որովհետև պայմանը միշտ ճշմարիտ է։ Դու կարող ես օգտագործել break հրամանը, որ դադարեցնես նման ցիկլ։""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()

#math
def math1():
    text = ("""
    math մոդուլը Python-ում ստանդարտ գրադարան է, որը տրամադրում է մաթեմատիկական ֆունկցիաներ և հաստատուններ։ Այն հիմնականում օգտագործվում է վիճակագրական, թվաբանական, տրիգոնոմետրիկ և այլ մաթեմատիկական գործողություններ կատարելու համար։

    ✅ math մոդուլը օգտագործելու ձևը՝

    import math
    
    
    📘 Օրինակներ math մոդուլի ֆունկցիաներից
    🔹 Քառակուսի արմատ
    
    import math
    print(math.sqrt(16))  # արդյունք՝ 4.0
    🔹 Գործակից (factorial)
    
    print(math.factorial(5))  # արդյունք՝ 120
    🔹 Կլորացում դեպի վեր (ceil) և վար (floor)
    
    print(math.ceil(4.3))   # արդյունք՝ 5
    print(math.floor(4.7))  # արդյունք՝ 4
    🔹 Տրիգոնոմետրիկ ֆունկցիաներ
    
    print(math.sin(math.pi / 2))  # արդյունք՝ 1.0
    🔹 Հաստատուններ
    
    print(math.pi)      # 3.141592653589793
    print(math.e)       # 2.718281828459045
    📌 Ամփոփում
    
    Ֆունկցիա	Նշանակություն
    math.sqrt(x)	Քառակուսի արմատ
    math.factorial(x)	Գործակից
    math.ceil(x)	Կլորացում դեպի վեր
    math.floor(x)	Կլորացում դեպի վար
    math.sin(x)	Սինուս
    math.cos(x)	Կոսինուս
    math.log(x)	Բնական լոգարիթմ (լոգ x ըստ e)
    math.pi	Պի արժեքը
    math.e	e արժեքը (բնական լոգարիթմի հիմք)
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
#tox
def strg1():
    text = ("""
    Python-ում տողը (string) տեքստի տեսակ տվյալ է (data type), որը ներկայացնում է սիմվոլների շարան։ Տողերը օգտագործվում են բառեր, նախադասություններ, նամակներ, անուններ և այլ տեքստային արժեքներ պահելու և մշակելու համար։

    ✅ Տող ստեղծելու ձևերը՝
    
    # Օգտագործելով մուրճիկ չակերտներ
    text1 = "Hello"
    
    # Կամ մեկական չակերտներ
    text2 = 'World'
    
    📘 Տողի օրինակներ
    
    name = "Anna"
    greeting = "Hello, " + name
    print(greeting)  # Արդյունք՝ Hello, Anna
    🔹 Տողի վրա գործողություններ
    📌 Տողի երկարություն
    
    text = "Python"
    print(len(text))  # Արդյունք՝ 6
    📌 Տողի որոշ մաս վերցնել (slicing)
    
    text = "Python"
    print(text[0])   # P
    print(text[1:4]) # yth
    📌 Տառերը մեծ/փոքր դարձնել
    
    text = "hello"
    print(text.upper())  # HELLO
    print(text.lower())  # hello
    📌 Ստուգել՝ պարունակու՞մ է արդյոք ենթատող
    
    print("th" in "Python")  # True
    📌 Ամփոփում
    
    Գործողություն	Օրինակ	Արդյունք
    Երկարություն	len("hello")	5
    Մեծատառ դարձնել	"abc".upper()	"ABC"
    Փոքրատառ դարձնել	"ABC".lower()	"abc"
    Տառեր վերցնել	"hello"[1:4]	"ell"
    Միավորել տողեր	"hi" + " there"	"hi there"
    Ստուգել ընդգրկում	"a" in "cat"	True
""")
    for char in text:
        print(char, end="", flush=True)
        time.sleep(0.01)
    main.main1()
